require 'rattler'
require_relative './parser_parts/rule_reference'
require_relative './parser_parts/byte_body'
require_relative './parser_parts/components'
require_relative './parser_parts/rule_body'
require_relative './parser_parts/rule'

parser PogglerParser < Rattler::Runtime::PackratParser

%whitespace BLANK*

start   <- ext? functions? components  { Components.new _.last[0], _.last[1] }

functions <- ~':functions:' ~newln function (~newln+ function)* ~newln ~newln

function <- name ~'(' size_t ~'):' (size_t / name) ~{
  puts "Read function declaration " + _[0]
  _
}

components <- ~':components:' ~newln rule (~newln+ rule)* ~newln
rule <- name definition                       {
  Rule.new _[0], _[1]
}

name <- @(WORD+)

definition <-
  size body { RuleBody.new _[0], _[1] } /
  body { RuleBody.new nil, _ } /
  size { RuleBody.new _, nil }

body <- ~':=' rule_expr                      ~{
  puts("  body: " + _.join(''))
  _
}

rule_expr <- rule_body size_multiple?
rule_body <- rule_cons
rule_cons <- (rule_opt ":" rule_cons / rule_opt)
rule_opt <- (rule_statement '|' rule_opt / rule_statement)
rule_statement <- rule_with_variable_binding / function_with_args / rule_atom
function_with_args <- name '(' name (',' name)* ')'
rule_with_variable_binding <- name "\\" rule_atom
rule_atom <- 
  lit_byte  { ByteBody.new _ } /
  name      { RuleReference.new _ } /
  ~'(' rule_expr ~')'

size <- ~':' size_t                          ~{
  print("  size '" + _[0] + "'")
  if (_[1].length > 0)
     puts(" x " + _[1].join('')) rescue puts(" x " + _[1])
  else
     print("\n")
  end
  _
}
size_t <- ('bit' / 'byte') size_multiple?
size_multiple <- ~'{' size_expr ~'}'
size_expr <- size_mult
size_mult <- size_atom '/' size_mult / size_atom '*' size_mult / size_sum
size_sum <- size_atom '-' size_sum / size_atom '+' size_sum / size_atom
size_atom <- size_const / size_unknown / size_label / '(' size_expr ')'
size_unknown <- '_'
size_const <- @(DIGIT+)
size_label <- name                            { |a| a + ".size" }

ext <- ~':ext:' ~newln exts ~newln ~newln    ~{
  puts("Expected extensions: " + _.join(', '))
  _
}
exts <- ~'[' ext_str (~',' ext_str)* ~']'
ext_str <- @('"' '.' ALNUM* '"')

lit_byte <- @('0x' XDIGIT XDIGIT)
newln <- "\n"

