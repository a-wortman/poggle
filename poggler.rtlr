require 'rattler'

require 'REPLACEME'
#replaced with Dir[File.join(File.dirname(__FILE__), 'parser_parts', '**', '*.rb')].each {|file| require file }

parser PogglerParser < Rattler::Runtime::PackratParser

%whitespace BLANK*

start   <- ext? functions? components  { Components.new _.last[0], _.last[1] }

functions <- ~':functions:' ~newln function (~newln+ function)* ~newln ~newln

function <- name ~'(' size_t ~'):' (size_t / name) ~{
  puts "Read function declaration " + _[0]
  _
}

components <- ~':components:' ~newln rule (~newln+ rule)* ~newln
rule <- name definition { Rule.new _[0], _[1] }

name <- @(WORD+)

definition <-
  size body { RuleBody.new _[0], _[1] } /
  body { RuleBody.new nil, _ } /
  size { RuleBody.new _, nil }

body <- ~':=' rule_expr

rule_expr <- rule_body
rule_body <- rule_cons
rule_cons <-
  rule_disj ~":" rule_cons  { Conjunction.new _[0], _[1] } /
  rule_disj
rule_disj <-
  rule_with_variable_binding ~'|' rule_disj  { Disjunction.new _[0], _[1] } /
  rule_with_variable_binding
rule_with_variable_binding <-
  name ~"\\" rule_atom { VariableBinding.new _[0], _[1] } /
  rule_opt
rule_opt <-
  rule_statement ~'?' { Disjunction.new _, Repeat.new(ConstSize.new(0), ByteBody.new("0x00")) } /
  rule_statement
rule_statement <-
  function_with_args /
  rule_atom size_multiple?  {
    if _[1] != []
      Repeat.new _[1][0], _[0]
    else
      _[0]
    end
  }
function_with_args <- name '(' name (',' name)* ')' ~{
  puts "Function call of " + _[0] + " with " + _[1] + " and others?"
  _
}
rule_atom <-
  'eof'     { Eof.new } /
  lit_byte  { ByteBody.new _ } /
  lit_bits  { BitBody.new _ } /
  lit_num   { NumRule.new _ } /
  name      { RuleReference.new _ } /
  str       { StrRule.new _ } /
  ~'(' rule_expr ~')'

size <- ~':' size_t
size_t <-
  ~'bit' size_multiple? { Bits.new _[0] } /
  ~'byte' size_multiple? { Bytes.new _[0] } /
  name size_multiple? {
    Prim.new _[0], _[1]
  }
size_multiple <- ~'{' size_expr ~'}'
size_expr <- size_mult
size_mult <-
  size_atom ~'/' size_mult { Div.new _[0], _[1] } /
  size_atom ~'*' size_mult { Mul.new _[0], _[1] } /
  size_sum
size_sum <-
  size_atom ~'-' size_sum { Sub.new _[0], _[1] } /
  size_atom ~'+' size_sum { Sum.new _[0], _[1] } /
  size_atom
size_atom <- size_const / size_unknown / size_label / ~'(' size_expr ~')'
size_unknown <- '_' { UnboundedSize.new }
size_const <- lit_num { ConstSize.new _ }
size_label <- name { ReferenceSize.new _, Components.vars }

ext <- ~':ext:' ~newln exts ~newln ~newln    ~{
  puts("Expected extensions: " + _.join(', '))
  _
}
exts <- ~'[' ext_str (~',' ext_str)* ~']'
ext_str <- @('"' '.' ALNUM* '"')

str <- ~'"' @((" " / ALNUM / "!")*) ~'"'

str2 <- ~'"' escaped_char* ~'"' {
  puts _
  _
}
escaped_char <-
  GRAPH /
  SPACE

lit_byte <- @('0x' XDIGIT XDIGIT)
lit_num <- @(DIGIT+) { _.to_i }
lit_bits <- ~'b' @(("0" / "1")+)
newln <- "\n"

